import numpy as np
import matplotlib.pyplot as plt
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import ElasticNet
from sklearn.decomposition import PCA, KernelPCA
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from scipy.signal import find_peaks, savgol_filter, periodogram
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.svm import SVR
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C
import pandas as pd
import seaborn as sns
import tkinter as tk
from tkinter import ttk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.ticker import FuncFormatter
from scipy import fftpack
from matplotlib.colors import LinearSegmentedColormap

# Simulera neutron-spridningsdata med realistiskt brus och högre komplexitet
np.random.seed(0)
angles = np.linspace(0, 180, 200)
intensity = np.sin(np.radians(angles)) + 0.1 * np.sin(np.radians(2*angles)) + 0.05 * np.random.normal(size=angles.size)

# Lägg till brusreducering med Savitzky-Golay filter
intensity_smoothed = savgol_filter(intensity, window_length=15, polyorder=3)

# Identifiera toppar på originaldata med justerade parametrar för bättre detektion
peaks, properties = find_peaks(intensity, height=0.01, prominence=0.01, distance=1)

# Toppens egenskaper
peak_positions = angles[peaks]
peak_heights = intensity[peaks]
peak_prominences = properties['prominences']
peak_widths = properties.get('widths', np.zeros_like(peaks))

# Logga toppens egenskaper
print("Toppens Positioner (Vinklar):", peak_positions)
print("Toppens Intensiteter:", peak_heights)
print("Toppens Prominence (Tydlighet):", peak_prominences)
print("Toppens Bredd (FWHM):", peak_widths)

# Standardisering av data
scaler = StandardScaler()
angles_scaled = scaler.fit_transform(angles.reshape(-1, 1))

# PCA och KernelPCA för att minska dimensionalitet 
pca = PCA(n_components=2)
kpca = KernelPCA(kernel='rbf', n_components=2, fit_inverse_transform=True)
angles_pca = pca.fit_transform(np.column_stack((angles_scaled, intensity_smoothed.reshape(-1, 1))))
angles_kpca = kpca.fit_transform(np.column_stack((angles_scaled, intensity_smoothed.reshape(-1, 1))))

# Dela upp data i träning och test
X_train, X_test, y_train, y_test = train_test_split(angles_scaled, intensity_smoothed, test_size=0.2, random_state=42)

# Förbättrad polynomiell regression med fler modeller
degree_range = [1, 2, 3, 4, 5]
models = {
    'ElasticNet': ElasticNet(max_iter=10000),
    'GradientBoosting': GradientBoostingRegressor(),
    'RandomForest': RandomForestRegressor(),
    'MLP': MLPRegressor(hidden_layer_sizes=(50, 50), max_iter=1000),
    'SVR': SVR(kernel='rbf'),
    'GaussianProcess': GaussianProcessRegressor(kernel=C(1.0, (1e-3, 1e3)) * RBF(10, (1e-2, 1e2)), n_restarts_optimizer=9),
}

results = {}

for name, model in models.items():
    poly = PolynomialFeatures(degree=4, include_bias=False)
    scaler_model = StandardScaler()
    
    pipeline = make_pipeline(poly, scaler_model, model)
    
    param_grid = {}
    if name == 'ElasticNet':
        param_grid = {'elasticnet__alpha': np.logspace(-3, 3, 7), 'elasticnet__l1_ratio': [0.1, 0.5, 0.9, 1.0]}
    elif name == 'GradientBoosting':
        param_grid = {'gradientboostingregressor__n_estimators': [50, 100, 200], 'gradientboostingregressor__learning_rate': [0.01, 0.1, 0.2]}
    elif name == 'RandomForest':
        param_grid = {'randomforestregressor__n_estimators': [50, 100, 200], 'randomforestregressor__max_depth': [5, 10, 20, None]}
    
    if param_grid:
        grid_search = RandomizedSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_squared_error', n_iter=50, random_state=42)
        grid_search.fit(X_train, y_train)
        best_model = grid_search.best_estimator_
    else:
        best_model = pipeline.fit(X_train, y_train)
    
    y_pred = best_model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    
    results[name] = {'r2': r2, 'mse': mse, 'mae': mae, 'model': best_model}

# Sammanfatta resultat i en tabell
df_results = pd.DataFrame(results).T[['r2', 'mse', 'mae']]
print(df_results)

def create_plot_1(frame, title, x, y, x_marks, y_marks, line_label, mark_label):
    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    
    ax.plot(x, y, label=line_label, color="blue")
    ax.plot(x_marks, y_marks, 'x', color='red', markersize=10, label=mark_label)
    
    ax.set_title(title)
    ax.legend()
    ax.grid(True)
    
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(frame)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_2(frame, title, xlabel, ylabel, x, y1, y2, line1_label, line2_label):
    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    
    ax.plot(x, y1, label=line1_label, color="blue", marker='')
    ax.plot(x, y2, label=line2_label, color="red", marker='')
    
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.legend()
    ax.grid(True)
    
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
    
    toolbar_frame = tk.Frame(frame)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_3(tab):
    fig = Figure(figsize=(20, 8), dpi=100)
    ax1 = fig.add_subplot(121)
    ax2 = fig.add_subplot(122)

    scatter1 = ax1.scatter(angles_pca[:, 0], angles_pca[:, 1], c=angles, cmap='viridis', marker='x')
    ax1.set_title("PCA of Neutron Scattering Data")
    ax1.set_xlabel("Principal Component 1")
    ax1.set_ylabel("Principal Component 2")
    cbar1 = fig.colorbar(scatter1, ax=ax1)
    cbar1.set_label('Angle (degrees)')

    scatter2 = ax2.scatter(angles_kpca[:, 0], angles_kpca[:, 1], c=angles, cmap='viridis', marker='x')
    ax2.set_title("Kernel PCA of Neutron Scattering Data")
    ax2.set_xlabel("Kernel Principal Component 1")
    ax2.set_ylabel("Kernel Principal Component 2")
    cbar2 = fig.colorbar(scatter2, ax=ax2)
    cbar2.set_label('Angle (degrees)')

    canvas = FigureCanvasTkAgg(fig, master=tab)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(tab)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_4(tab, model_name, angles, intensity_smoothed, angles_scaled):
    fig = Figure(figsize=(10, 6), dpi=100)
    ax = fig.add_subplot(111)

    ax.plot(angles, intensity_smoothed, label="True Intensity")
    ax.plot(angles, results[model_name]['model'].predict(angles_scaled), label=f"Predicted by {model_name}")

    ax.set_xlabel("Angle (degrees)")
    ax.set_ylabel("Intensity")
    ax.set_title(f"{model_name} Regression Results")
    ax.legend()

    canvas = FigureCanvasTkAgg(fig, master=tab)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(tab)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_5(tab, df_results, title):
    fig = Figure(figsize=(12, 6), dpi=100)  # Ökar storleken på figuren
    ax = fig.add_subplot(111)

    # Sortera data efter R² score
    df_results = df_results.sort_values('r2', ascending=False)

    # Skapa en palett med distinkta färger
    palette = sns.color_palette("husl", len(df_results))

    # Plotta med färgad barplot och minskar tjockleken på pelarna
    bars = sns.barplot(x=df_results.index, y='r2', data=df_results, ax=ax, palette=palette, width=0.5)  # Justerade 'width' till 0.5
    
    # Lägg till värden ovanpå staplarna
    for bar in bars.patches:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height,
                f'{height:.2%}',
                ha='center', va='bottom', rotation=0, fontsize=10)

    ax.set_title(title, fontsize=16)
    ax.set_ylabel("R² Score", fontsize=14)
    ax.set_xlabel("Model", fontsize=14)
    ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: f'{y * 100:.0f}%'))
    
    # Förbättra layout
    ax.tick_params(axis='both', which='major', labelsize=12)
    plt.tight_layout()

    canvas = FigureCanvasTkAgg(fig, master=tab)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(tab)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_spectrum(frame, title, xlabel, ylabel, x, y):
    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    
    ax.plot(x, y)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.grid(True)
    
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(frame)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

def create_plot_colored_spectrum(frame, title, xlabel, ylabel, x, y):
    fig = Figure(figsize=(10, 6), dpi=100)
    ax = fig.add_subplot(111)
    
    # Skapa en färgkarta som liknar ett ljusspektrum
    colors = [(0.6, 0, 0), (0, 0, 1), (0, 1, 0), (1, 1, 0), (1, 0.4, 0), (0.8, 0, 0)]  # RGB values for ROYGBIV
    n_bins = 100
    cmap_name = 'my_spectrum'
    cm = LinearSegmentedColormap.from_list(cmap_name, colors, N=n_bins)

    # Normalisera y-värden för att använda som index i colormap
    y_norm = (y - min(y)) / (max(y) - min(y))

    # Plotta spektrum med färger baserat på amplitud
    for i in range(len(x)):
        ax.plot(x[i], y[i], 'o', color=cm(y_norm[i]), markersize=4)

    ax.set_xlim(0, max(x))  # Justera x-axis för att visa hela spektrumet
    ax.set_ylim(0, max(y)*1.1)  # Lite extra utrymme ovanför högsta amplituden
    
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.grid(True)
    
    # Lägg till en färgbar
    sm = plt.cm.ScalarMappable(cmap=cm, norm=plt.Normalize(vmin=min(y), vmax=max(y)))
    sm.set_array([])
    cbar = fig.colorbar(sm, ax=ax, orientation='vertical')
    cbar.set_label('Amplitud')

    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    toolbar_frame = tk.Frame(frame)
    toolbar_frame.pack(fill=tk.X)
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

# Utför Fourier-transform för spektralanalys
fft_intensity = fftpack.fft(intensity)
frequencies = fftpack.fftfreq(len(intensity), d=(angles[1]-angles[0])*np.pi/180)  # d is the sample spacing in radians

# Välj bara positiva frekvenser
pos_freq = frequencies[:len(frequencies)//2]
pos_fft = np.abs(fft_intensity[:len(frequencies)//2])

# Skapa huvudfönstret
root = tk.Tk()
root.title("SANS Analys")
root.geometry("1400x800")

# Skapa en Notebook-widget för tabbar
notebook = ttk.Notebook(root)

# Skapa data för graferna
x1 = angles
y1 = intensity
y2 = intensity_smoothed
x2 = peak_positions
y3 = peak_heights

# Skapa tabbar
tab1 = ttk.Frame(notebook)
tab2 = ttk.Frame(notebook)
tab3 = ttk.Frame(notebook)
tab4 = ttk.Frame(notebook)
tab5 = ttk.Frame(notebook)
tab_spectrum = ttk.Frame(notebook)  # Ny flik för spektralanalys
tab_colored_spectrum = ttk.Frame(notebook)  # Ny flik för spektralanalys med färger

# Lägg till tabbarna i Notebook
notebook.add(tab1, text="Simulerat")
notebook.add(tab2, text="Peak")
notebook.add(tab3, text="Scatter-diagram")
notebook.add(tab_spectrum, text="Spektralanalys")
notebook.add(tab_colored_spectrum, text="Spektralfärger")
notebook.pack(expand=True, fill="both")

create_plot_1(
    tab2,
    title="Identifierade Intensitetstoppar i Neutron-Spridningsdata",
    x=x1,
    y=y1,  # Bytt från y2 till y1 för att visa original intensitet
    x_marks=x2,
    y_marks=y3, 
    line_label="Original Intensitet",
    mark_label="Identifierade Toppar"
)

create_plot_2(
    tab1, 
    title="Simulerad Neutron-Spridningsdata med Filtering", 
    xlabel="Vinkel (grader)", 
    ylabel="Intensitet", 
    line1_label="Original Intensitet", 
    line2_label="Filtrerad Intensitet",
    x=x1, 
    y1=y1,
    y2=y2
)

create_plot_3(tab3)

for name, res in results.items():
    regression_tab = ttk.Frame(notebook)
    notebook.add(regression_tab, text=f"{name}")
    create_plot_4(regression_tab, name, angles, intensity_smoothed, angles_scaled)

notebook.add(tab5, text="R² Score Comparison")
create_plot_5(tab5, df_results, "R² Score Comparison")

# Spektralanalys flik utan färger
create_plot_spectrum(
    tab_spectrum,
    title="Spektralanalys av Neutron-Spridningsdata",
    xlabel="Frekvens (rad/s)",
    ylabel="Amplitud",
    x=pos_freq,
    y=pos_fft
)

# Spektralanalys flik med färger
create_plot_colored_spectrum(
    tab_colored_spectrum,
    title="Spektralanalys med Spektralfärger",
    xlabel="Frekvens (rad/s)",
    ylabel="Amplitud",
    x=pos_freq,
    y=pos_fft
)

# Starta huvudloopen
root.mainloop()
